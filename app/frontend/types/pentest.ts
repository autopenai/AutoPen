export enum EventType {
  LOAD = "load",
  CLICK = "click",
  INPUT = "input",
  VULNERABILITY = "vulnerability",
  ERROR = "error",
  INFO = "info",
}

export interface Vulnerability {
  severity: string
  type: string
  title: string
  description: string
}

export interface LoadEventDetails {
  url: string
}

export interface ClickEventDetails {
  element: string
}

export interface InputEventDetails {
  field: string
  test_value: string
}

// Update the EventDetails to match the API schema exactly
export interface ApiEventDetails {
  message?: string | null
  data?: Record<string, any> | null
}

export type EventDetails = LoadEventDetails | ClickEventDetails | InputEventDetails | Vulnerability | ApiEventDetails

// Update PentestEvent to use the correct details structure
export interface PentestEvent {
  event_type: EventType
  timestamp: string
  message: string
  details?: ApiEventDetails | null
}

// API Result structure (different from internal TestResult)
export interface ApiResult {
  severity: string
  type: string
  title: string
  description: string
}

// Internal TestResult for UI display
export interface TestResult {
  id: string
  vulnerability_type: string
  severity: string
  title: string
  description: string
  location: string
  element?: string
}

export interface Test {
  test_id: string
  status: string
  progress_percentage: number
  current_phase: string
  events: PentestEvent[]
  results: ApiResult[]
}

export interface NewTestResponse {
  test_id: string
  status: string
  url: string
}

// For scan history display
export interface ScanHistory {
  id: string
  url: string
  timestamp: Date
  findings: {
    high: number
    medium: number
    low: number
  }
  results?: ApiResult[]
}
